Description

Approach

	Queue and MyQueue: I wanted to make my queues as simple as possible to implement so I 
	could get started on the bigger project so I implemented it as a bounded circular array.
	I know that it will never have to hold more than a certain number of movies of which it 
	will know how many before hand so I figured no harm in making it bounded. Even when the 
	user can add movies to the list, the file will keep track of the # of movies. I can always
	make it unbounded later too.
	
	PriorityQueue: I decided to implement the mode function (normal queue and priority queue) both
	in PriorityQueue for modular simplicity. I used a regular queue inside the PriorityQueue to help 
	keep track of the normal order of elements. I also used a generic wrapper class QueueItemShell
	to wrap the objects and hold data about their priority and the order in which they were added. 
	this allowed me to compare the elements when I dequeued. I kept persistent sets of elements in 
	both the normal queue and array of other queues assigned priorities. My method maybe inefficient 
	in both memory space and time (to keep persistent data in two separate places every time an element 
	is dequeued, either by priority mode or by normal mode, the element in a queue must be dequeued and 
	compared then pushed onto a stack one by one until a match is found) but my method is modular and 
	does not violate the rule of demeter (no objects reach way into other objects they didn't create 
	to call methods that have nothing to do with them). With my PriorityQueue switching between priority 
	and normal mode is seamless. It's just a different view of the same data.
	
	

Test Cases
Key: Working As Expected = WAE
	 Unknown Bug = UB
	 Known Bug = KB

	Individual Class Tests (Modular Testing):
	
		MyQueue: Completely functional. 10/06/2011. WAE
		
			Case 1: tested enqueue operation, 
					filled up queue until it was full and then tried to add another element,
					element was not added, false was returned. 10/06/2011. WAE.
			
			Case 2: tested dequeue operation,
					dequeued a full queue until it was empty and then tried to dequeue again
					null was returned and no element was removed. 10/06.2011 WAE.
					
			Case 3: tested circular array functionality
					enqueued several elements, dequeued several elements, enqueued several more
					to ensure wrap around. No problems occurred, all elements accounted for. 10/06/2011 WAE.
		
		PriorityQueue:
			
			Case 1: tested enqueue by priority operation,
				    enqueued elements until full with various priorities then enqueued one more
				    new element was not added false was returned. enqueued elements with all the 
				    same priorities until full and tried to add one more, element was not added
				    false was returned. 10/06/2010. WAE.
				    
			Case 2: tested dequeue by priority operation,
					tried to dequeue an empty queue, null was returned. filled up a queue and removed
					all elements, then tried to remove one more, null was returned. Added elements of 
					different priorities in different orders, when dequeued all elements came out in 
					order of priority and then by FIFO style. 10/06/2011 WAE.
					
			Case 3: tested enqueue normal mode,
					enqueued several elements until full, then enqueued one more,
					it returned false and item was not enqueued. 10/06/2011. WAE.
					
			Case 4: tested dequeue normal mode,
					tried to dequeue an empty queue, null was returned. 10/06/2011. WAE.
					
			Case 5. tested enqueue by priority and dequeue normally,
					enqueued several elements by varying priorities and then dequeued normally
					all elements came out in order stored regardless of priority. 10/06/2011. WAE
					
			Case 6. tested enqueue with no priority and then enqueued by priority and dequeued by priority,
					enqueued several elements by priority and also without a specified priority then 
					dequeued them all by priority. They call came out in correct order. 10/06/2011. WAE.
				

Conclusions