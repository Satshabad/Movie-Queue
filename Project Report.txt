Description

Approach

	Queue and MyQueue: I wanted to make my queues as simple as possible to implement so I 
	could get started on the bigger project so I implemented it as an unbounded circular array.
	I let the caller specify the number of expected elements to cut down on queue expanding run time.
	
	PriorityQueue: I decided to implement the mode function (normal queue and priority queue) both
	in PriorityQueue for modular simplicity. I used a regular queue inside the PriorityQueue to help 
	keep track of the normal order of elements. I also used a generic wrapper class QueueItemShell
	to wrap the objects and hold data about their priority and the order in which they were added. 
	this allowed me to compare the elements when I dequeued. I kept persistent sets of elements in 
	both the normal queue and array of other queues assigned priorities. My method maybe inefficient 
	in both memory space and time (to keep persistent data in two separate places every time an element 
	is dequeued, either by priority mode or by normal mode, the element in a queue must be dequeued and 
	compared then pushed onto a stack one by one until a match is found) but my method is modular and 
	does not violate the rule of demeter (no objects reach way into other objects they didn't create 
	to call methods that have nothing to do with them). With my PriorityQueue switching between priority 
	and normal mode is seamless. It's just a different view of the same data. I realize I probably could 
	have made a regular Priority Queue and used it in this class in combo with a normal queue but having 
	direct access to the PriorityQueue's internal workings makes the dequeue operation a lot faster, instead 
	of dumping all the elements out looking for the right one, we already know which sub-queue the element is 
	in and can start looking directly there.
	
	MovieQueue: I wanted the higher level functions of this project to be as simple as possible. if you take a 
	look at the MovieQueue class you can see how simple it is. it push all logic to the work horse of the queues.
	the methods in MovieQueue directly relate to the function of the end program but are completely decoupled from 
	any view. All the methods are return queues for the caller to display.
	
	FileManager: I decided to create one place to have methods that deal with files, this is it. This class helps keep 
	the tedious file writing and reading from the main parts of the program and it ensures that that any files opened 
	will be closed. All saved states of objects also go through here to make it easier to keep persistent data. also having
	one place that writes to files keeps the files from being corrupted. I decided to add the persistent data functionality 
	through Serializable. I learned it this summer while working on programming android phones, so I believe it's fair game. I 
	am not using it like a black box but I also don't fully understand it's implementation, though I would love to learn about it.
	We stand on the shoulders of giants, if we must understand  every little detail of the things we use in order to justify 
	using them then I would never get to school in the morning because I would still be trying to understand exactly how my 
	car can use tiny explosions to move me forward. All code was written by me. Anyway, for simplicity's sake I have created very 
	specific methods for saving the exact thing I want to save rather than adhering to more modular code. This allows the upper 
	classes that use this to know nothing of file names and such thing, it just allows the caller to store and retrieve it's 
	specific object. It may not be pretty but it's for the case of security and simplicity.
	
	HeapSorter: I decide to use an entire object for heap sort just to keep all the relevant code in once place even though technically
	since it only has one function it should probably go in a method. I implemented heap sort using both siftUp and siftDown methods. 
	I used siftUp to build the heap out of the given array and the siftDown method to re-bring the largest element to the top after 
	putting the leaf there. I implemented it without in an in-place algorithm style so it takes no extra memory. What else can I say?
	It's heap sort, it's pretty awesome in and of it's self. 
	

Test Cases
Key: Working As Expected = WAE
	 Unknown Bug = UB
	 Known Bug = KB

	Individual Class Tests (Modular Testing):
	
		MyQueue:
		
			Case 1: tested enqueue operation, 
					filled up queue until it was full and then tried to add another element,
					element was added 10/08/2011. WAE.
			
			Case 2: tested dequeue operation,
					dequeued a full queue until it was empty and then tried to dequeue again
					null was returned and no element was removed. 10/06.2011 WAE.
					
			Case 3: tested circular array functionality
					enqueued several elements, dequeued several elements, enqueued several more
					to ensure wrap around. No problems occurred, all elements accounted for. 10/06/2011 WAE.
					
		
		PriorityQueue:
			
			Case 1: tested enqueue by priority operation,
				    enqueued elements until full with various priorities then enqueued one more
				    new element was added. enqueued elements with all the 
				    same priorities until full and tried to add one more, element was added.
				     10/08/2010. WAE.
				    
			Case 2: tested dequeue by priority operation,
					tried to dequeue an empty queue, null was returned. filled up a queue and removed
					all elements, then tried to remove one more, null was returned. Added elements of 
					different priorities in different orders, when dequeued all elements came out in 
					order of priority and then by FIFO style. 10/06/2011 WAE.
					
			Case 3: tested enqueue normal mode,
					enqueued several elements until full, then enqueued one more,
					item not enqueued. 10/08/2011. WAE.
					
			Case 4: tested dequeue normal mode,
					tried to dequeue an empty queue, null was returned. 10/06/2011. WAE.
					
			Case 5. tested enqueue by priority and dequeue normally,
					enqueued several elements by varying priorities and then dequeued normally
					all elements came out in order stored regardless of priority. 10/06/2011. WAE
					
			Case 6. tested enqueue with no priority and then enqueued by priority and dequeued by priority,
					enqueued several elements by priority and also without a specified priority then 
					dequeued them all by priority. They call came out in correct order. 10/06/2011. WAE.
				
		MovieQueue:
		
		FileManager:
			
			Case 1: tested ability to read movies.txt file and create list of movies
					All movies were read in and displayed correctly. 10/07/2011. WAE
					
			Case 2: tested ability to append movies to the movies.txt file
					movies all added correctly and correctly turned into movie objects when called to.
					10/07/2011. WAE.
					
			Case 3: tested save and retrieve methods,
					created a queue and saved it, ended the program, opened the queue and appended it.
					10/07/2011. WAE.
					
					

Conclusions